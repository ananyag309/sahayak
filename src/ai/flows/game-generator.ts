// src/ai/flows/game-generator.ts
'use server';
/**
 * @fileOverview A game generator AI agent.
 *
 * - generateGame - A function that handles the game generation process.
 * - GenerateGameInput - The input type for the generateGame function.
 * - GenerateGameOutput - The return type for the generateGame function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GenerateGameInputSchema = z.object({
  topic: z.string().describe('The topic of the game or quiz.'),
  grade: z.number().describe('The grade level for the game or quiz.'),
});
export type GenerateGameInput = z.infer<typeof GenerateGameInputSchema>;

const GenerateGameOutputSchema = z.object({
  gameLogic: z.string().describe('The game logic or quiz questions generated by the AI.'),
  format: z.enum(['printable', 'interactive']).describe('The format of the game (printable or interactive).'),
});
export type GenerateGameOutput = z.infer<typeof GenerateGameOutputSchema>;

export async function generateGame(input: GenerateGameInput): Promise<GenerateGameOutput> {
  return generateGameFlow(input);
}

const prompt = ai.definePrompt({
  name: 'generateGamePrompt',
  input: {schema: GenerateGameInputSchema},
  output: {schema: GenerateGameOutputSchema},
  prompt: `You are an AI game generator for teachers. You will create a game or quiz based on the topic and grade level provided.

Topic: {{{topic}}}
Grade Level: {{{grade}}}

Please return the game logic or quiz questions and specify if it should be in a printable or interactive format.`,
});

const generateGameFlow = ai.defineFlow(
  {
    name: 'generateGameFlow',
    inputSchema: GenerateGameInputSchema,
    outputSchema: GenerateGameOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
